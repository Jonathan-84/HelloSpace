{"version":3,"sources":["Components/Navbar.js","Components/Footer.js","Assets/Images/video.png","Pages/home.js","Components/MusicPanel.js","Pages/Earth.js","Components/Mars/marsweather.js","Components/Earth/earthweather.js","Components/Earth/citySearch.js","Pages/Mars.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","to","Footer","href","target","rel","APIurl","process","Home","props","state","image","title","explanation","type","fetch","then","response","json","setState","url","media","media_type","showMedia","this","alt","src","video","height","width","console","log","Component","Music","value","handleChange","bind","event","onChange","frameBorder","allowtransparency","allow","ePhotoAPI","Earth","earthPic","earthDate","imageCaption","imageLat","imageLong","date","caption","centroid_coordinates","lat","lon","month","moment","format","day","year","long","MarsWeather","min","max","overall","wind","pressure","terrestrial_date","min_temp","max_temp","atmo_opacity","wind_speed","marsWinds","marsIcon","earthLow","minEarth","efarMin","toFixed","earthHi","maxEarth","efarMax","earthPress","earthPressure","eWind","earthWind","earthMain","condition","eIcon","icon","iconUrl","stDate","fixedDate","cTempMin","farMin","cTempMax","farMax","EarthWeather","owUrl","main","temp_min","temp_max","weather","speed","forceUpdate","CitySearch","handleEvent","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","alert","Mars","marspic","latest_photos","img_src","require","config","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba5a6a8f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n//import { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\n\r\n\r\nfunction Navbar(){\r\n\r\n    return (\r\n      <>\r\n                <div className='nav-container'>\r\n                  <div className=\"header-image\">\r\n                    <div className='header-container'>\r\n                  <h2>\r\n                      <Link to={\"/\"} className=\"nav-text\"> Hello Space</Link>\r\n                      </h2>\r\n                <div className='nav-links'>\r\n       {/*      <ul >\r\n                <Link to=\"/\" className=\"nav-text\">Temp</Link>\r\n                        </ul>*/}\r\n                \r\n       <ul>\r\n                <Link to={\"/earth\"} className=\"nav-text\">Earth</Link>\r\n                </ul>\r\n                <ul>\r\n                <Link to={\"/mars\"} className=\"nav-text\">Mars</Link>\r\n                </ul>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n      </>\r\n    );\r\n  };\r\n  \r\n  export default Navbar;\r\n  ","import React from 'react';\r\n//import Navbar from 'react-bootstrap/Navbar'\r\n//import { Link } from 'react-router-dom';\r\n\r\n// Will add in the future\r\nfunction Footer() {\r\n    return (\r\n      <>\r\n\r\n<div className='footer'>\r\n    <div className=\"footer-container\" >  \r\n\r\n<ul>\r\n    <a className='footer-text' href=\"https://github.com/Jonathan-84\" target=\"_blank\" rel='noreferrer'>GitHub</a>\r\n </ul>\r\n <ul>\r\n    <a className='footer-text' href=\"https://www.linkedin.com/in/jrob84\" target=\"_blank\" rel='noreferrer'>LinkedIn</a>\r\n    </ul>\r\n</div>\r\n</div>\r\n</>    \r\n    )\r\n    \r\n}\r\nexport default Footer;","export default __webpack_public_path__ + \"static/media/video.c150e9f1.png\";","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport video from '../Assets/Images/video.png';\r\n\r\n    const api_key= process.env.REACT_APP_GOVT_API_KEY;\r\n    \r\n\r\n\r\n//full link https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY\r\n\r\nconst APIurl = `https://api.nasa.gov/planetary/apod?api_key=${api_key}`;\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n          image: [],\r\n          title: [],\r\n          explanation: [],\r\n          type: []\r\n         \r\n\r\n        };\r\n    }\r\n  \r\n\r\n    componentDidMount() {\r\n        fetch(APIurl)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                this.setState({\r\n                    image:response.url,\r\n                    title:response.title,\r\n                    explanation:response.explanation,\r\n                    media: response.media_type\r\n\r\n                  \r\n                })\r\n            })\r\n            \r\n    }\r\n  \r\n    render() {\r\n \r\n      let showMedia;\r\n      if (this.state.media===\"video\") {\r\n        showMedia = (\r\n          <span>\r\n            <p>It's a video of the day! Click the icon to be redirected to it!</p>\r\n            <a href={this.state.image}>\r\n          <img  alt='random astronomy' src={video}  height=\"200\" width=\"200\"/>\r\n          </a>\r\n          \r\n          </span>\r\n        )\r\n      } else {\r\n        showMedia = (\r\n          <a href={this.state.image}>\r\n          <img  alt='random astronomy' src={this.state.image}  height=\"300\" width=\"500\"/>\r\n          </a>\r\n        )\r\n      }\r\n      const { image, title, explanation} = this.state;\r\n      console.log(image, title, explanation)\r\n        return (\r\n          <>\r\n          <div>\r\n          <h1 className='title '>Welcome</h1>\r\n          <h3>Astronomy Photo of the Day</h3>\r\n          {showMedia}\r\n      \r\n            <p>{this.state.title}</p>\r\n            <p className='explText'>{this.state.explanation}</p>\r\n            </div>\r\n            <br>\r\n            </br>\r\n            <br></br>\r\n</>\r\n       )\r\n   }\r\n        }\r\nexport default Home;\r\n\r\n//clean up afterwards, this was the original JSON pull\r\n/*\r\nThe fetch itself works, and extracted JSON, fiddling with the format to better map the information and \r\nuse it below. Not to mention, this would better allow me to use \r\n\r\nconst baseUrl= 'https://api.nasa.gov/planetary/apod';\r\n  const api_key= process.env.REACT_APP_GOVT_API_KEY;\r\n\r\n\r\n  fetch(`${baseUrl}?api_key=${api_key}`)\r\n    .then(response => response.json())\r\n    .then(response => {\r\n  console.log (response.hdurl, response.explanation);\r\n\r\n     I believe the above link was the right one, need to find how to return the \r\n      link-- ran into request issues, too many while testing state\r\n       console.log(response.originator.name)\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n\r\n    \r\n    return (\r\n      <>\r\n      <h1>Home</h1>\r\n      <p> NASA is the bees knees.\r\n        </p>\r\n        <div className=\"pic-day\">\r\n          <p>Picture Goes Here</p>\r\n      \r\n        </div>\r\n\r\n\r\n      </>\r\n    );\r\n    }\r\n  export default Home;\r\n*/\r\n","import React, {Component} from 'react';\r\n\r\n\r\n// Look into the ability to integrate the playe, rather than just the iframe. Iframe only gives sample of song,\r\n//want the ability to play on-going, that's the purpose of keeping it the sameo on left panel\r\n\r\nclass Music extends Component {\r\n \r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: 'https://open.spotify.com/embed/playlist/792i0xmXcx6A9R3dYr3koO?theme=0'\r\n  };\r\n\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n\r\n  }\r\n\r\n \r\n  \r\n  handleChange(event) {\r\n    this.setState({value: event.target.value\r\n    });\r\n  \r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n      <br></br>\r\n      <form className=' row justify-content-around d-flex flex-column flex-lg-row align-content-center'>\r\n        <label className= 'music-color'>  Space Radio </label>\r\n          <select value={this.state.value} onChange={this.handleChange} className=\"music-color\">\r\n          <option className=\"music-color\" value=\"https://open.spotify.com/embed/playlist/792i0xmXcx6A9R3dYr3koO?theme=0\">Listen In Space</option>\r\n            <option className=\"music-color\" value=\"https://open.spotify.com/embed/episode/2RHNMVBEJ91SMisVu6NoPD\">Star Talk</option>\r\n            <option className=\"music-color\" value=\"https://open.spotify.com/embed/playlist/6pcuzwZSIw7OgL149bgJmZ\">Voyager Golden Record</option>\r\n          </select>\r\n     \r\n      </form>\r\n      <br></br>\r\n      <div className=\" center-music\">\r\n <iframe src={this.state.value}\r\n     width=\"100%\" height=\"400\" \r\n     frameBorder=\"0\" title='Spotify'allowtransparency=\"true\" allow=\"encrypted-media\">Listen In Space</iframe>\r\n        </div>\r\n  <br>\r\n  </br>\r\n  <br></br>\r\n  <br></br>\r\n  \r\n\r\n            \r\n      </>\r\n    );\r\n}\r\n}\r\n\r\nexport default Music;\r\n    \r\n\r\n\r\n/*import React from 'react';\r\n\r\n\r\n\r\nconst Music = () => {\r\n\r\n\r\n\r\n    return (\r\n      <>\r\n     \r\n     <iframe src=\"https://open.spotify.com/embed/playlist/792i0xmXcx6A9R3dYr3koO?theme=0\" \r\n     width=\"100%\" height=\"500\" \r\n     frameBorder=\"0\" title='Spotify'allowtransparency=\"true\" allow=\"encrypted-media\">Listen In Space</iframe>\r\n\r\n      </>\r\n    );\r\n  }; \r\n  export default Music;\r\n\r\n*/","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\n//import NearEarth from '../Components/Earth/nearEarth';\r\n\r\nconst api_key= process.env.REACT_APP_GOVT_API_KEY;\r\nconst ePhotoAPI = `https://api.nasa.gov/EPIC/api/natural/images?api_key=${api_key}`\r\n\r\n/// https://epic.gsfc.nasa.gov/archive/natural/2015/10/31/png/epic_1b_20151031074844.png\r\n\r\nclass Earth extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = { \r\n        earthPic: [],\r\n        earthDate: [],\r\n        imageCaption: [],\r\n        imageLat: [],\r\n        imageLong: []\r\n\r\n      //  marsweather: [],\r\n     \r\n      \r\n       \r\n\r\n      };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n\r\n\r\n      fetch(ePhotoAPI)\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              this.setState({\r\n                earthPic:response[0].image,\r\n                earthDate:response[0].date,\r\n                imageCaption:response[0].caption,\r\n                imageLat:response[0].centroid_coordinates.lat,\r\n                imageLong:response[0].centroid_coordinates.lon\r\n              //  marspic:response.latest_photos[0].img_src\r\n               \r\n          \r\n              })\r\n          })\r\n          \r\n  }\r\n\r\n  render() {\r\n\r\n    const {earthPic, earthDate, imageCaption, imageLat, imageLong} = this.state;\r\n    console.log(earthDate, earthPic, imageCaption, imageLat, imageLong)\r\n\r\n    const date= earthDate\r\n    const month= moment(date).format('MM')\r\n    const day= moment(date).format('DD')\r\n    const year=moment(date).format('YYYY')\r\n    console.log(month,day,year)\r\n\r\nconst lat = imageLat;\r\nconst long = imageLong;\r\n\r\nconst image= `https://epic.gsfc.nasa.gov/archive/natural/${year}/${month}/${day}/png/${this.state.earthPic}.png`\r\n\r\n\r\n    return (\r\n      <>\r\n      <h1 className=\"title \">Earth</h1>\r\n        <a href={image}>\r\n          <img  alt=\"Earth from DSCOVR's Earth Polychromatic Imaging Camera (EPIC) instrument.\" src={image}  className=\"planet-photo\"/>\r\n          </a>\r\n          <p>{this.state.imageCaption} on {month}/{day}/{year}.</p>\r\n<p>Geographical coordinates that the satellite is looking at:  <br></br>Longitude: {lat} || Latitude: {long}</p>\r\n          <br></br>\r\n          <br></br>\r\n          <br></br>\r\n    {/*      <NearEarth></NearEarth>*/}\r\n\r\n      </>\r\n    );\r\n  }; \r\n}\r\n  export default Earth;\r\n\r\n","import React, {Component} from 'react';\r\n//import Moment from 'react-moment';\r\nimport moment from 'moment';\r\n\r\n\r\n\r\nconst APIurl = 'https://api.maas2.apollorion.com/';\r\n\r\n    class MarsWeather extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = { \r\n              date:[],\r\n              min:[],\r\n              max:[], \r\n              overall:[], \r\n              wind:[], \r\n              pressure:[]\r\n            //  marsweather: [],\r\n           \r\n            \r\n             \r\n    \r\n            };\r\n        }\r\n      \r\n    \r\n        componentDidMount() {\r\n    \r\n\r\n            fetch(APIurl)\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    this.setState({\r\n                      date:response.terrestrial_date,\r\n                      min:response.min_temp,\r\n                      max:response.max_temp,\r\n                      overall: response.atmo_opacity,\r\n                      wind: response.wind_speed,\r\n                      pressure: response.pressure\r\n                    //  marspic:response.latest_photos[0].img_src\r\n                     \r\n                \r\n                    })\r\n                })\r\n                \r\n        }\r\n      \r\n        render() {\r\n          // Brings in the earth minimum temp child\r\n          const earthLow= this.props.minEarth;\r\n          \r\n          // Converts to Fahrenheit\r\n          const eLowFar= earthLow * 9 /5 +32;\r\n          const efarMin=eLowFar.toFixed(2)\r\n\r\n           // Brings in the earth minimum temp child\r\n           const earthHi= this.props.maxEarth;\r\n\r\n           const eHiFar= earthHi * 9 /5 +32;\r\n           const efarMax=eHiFar.toFixed(2)\r\n\r\n            // Brings in the earth press temp child\r\n          const earthPress= this.props.earthPressure;\r\n\r\n           // Brings in the earth wind to child\r\n           const eWind= this.props.earthWind;\r\n\r\n            // Brings in the earth press temp child\r\n          const earthMain= this.props.condition;\r\n\r\n          // Brings in the earth icon and set it for rendering\r\n          const eIcon= this.props.icon;\r\n          const iconUrl= `http://openweathermap.org/img/wn/${eIcon}@2x.png`\r\n          \r\n          \r\n          \r\n\r\n      const {date,max, min, overall, wind, pressure} = this.state;\r\n\r\n      \r\n      // The wind speeds which the rover hasn't been getting, really stands out, this adds text\r\n      let marsWinds;\r\n      if \r\n      (wind === null) {\r\n        marsWinds = (\r\n        <p  className='table-horizontal table-column-left table-header-text'>No data</p>\r\n        )\r\n      }\r\n      else{\r\n        marsWinds=(\r\n          <td className=\" table-horizontal table-column-left\">{wind} </td>\r\n       )\r\n      }\r\n/// If/else allows me to adjust overall Icon (using OpenWeather API Icons- I've only seen sunny so far)\r\n      let marsIcon;\r\n      if\r\n      (overall === \"Sunny\") {\r\n        marsIcon=(\r\n        <td className=\" table-horizontal table-column-left\">{overall}<span><img src=\"http://openweathermap.org/img/wn/01d@2x.png\" alt=\"icon for weather\"></img></span> </td>\r\n        )\r\n      }\r\n      else {\r\nmarsIcon=(\r\n  <td className=\"table-horizontal table-column-left\">{overall} </td>\r\n)\r\n      }\r\n\r\n      \r\n      \r\n      const stDate = date;\r\n      const fixedDate= moment(stDate).format('MMMM Do YYYY')\r\n      //new Date(stDate)\r\n      console.log (fixedDate)\r\n    \r\n      \r\n////////////////////////////////////\r\n\r\n//MARS\r\n      // converted Celsius to Fahre for Min\r\n      const cTempMin= min;\r\n      const toFarMin= cTempMin * 9 /5 +32;\r\n     const farMin=toFarMin.toFixed(2)\r\n// converted Celsius to Fahr for Max (data comes in as Celsius)\r\n      const  cTempMax= max;\r\n      const toFarMax= cTempMax * 9/5 +32;\r\n    \r\n   const farMax=toFarMax.toFixed(2)\r\n////////////////////////////////////////\r\n    return (\r\n      <>\r\n      <h1 className=\"title\">Mars Weather</h1>\r\n      <p className='subtitle'> Mars Data is from the Curiosity Rover (Rover Environmental Monitoring Station)</p>\r\n      <div className='w3-responsive'>\r\n      <table className=\"w3-table-all table-header-text\">\r\n<tr >\r\n  <th className=\" w3-center table-header-text\">Category</th>\r\n  <th className=\" w3-center table-column-left table-header-text\">Mars</th>\r\n  <th className=\" w3-center table-column-left table-header-text\">Earth (NYC*)</th>\r\n</tr>\r\n<tr>\r\n  <td className=\"table-horizontal\">Temp Low</td>\r\n  <td className=\" table-horizontal table-column-left\">{cTempMin} C / {farMin} F</td>\r\n  <td className=\" table-horizontal table-column-left\">  {earthLow} C/ {efarMin} F</td>\r\n</tr>\r\n<tr>\r\n  <td className=\"table-horizontal\">Temp High</td>\r\n  <td className=\" table-horizontal table-column-left\">{cTempMax} C / {farMax} F</td>\r\n  <td className=\" table-horizontal table-column-left\">{earthHi} C/ {efarMax} F</td>\r\n</tr>\r\n<tr>\r\n  <td className=\"table-horizontal\">Atmospheric Pressure</td>\r\n  <td className=\"table-horizontal  table-column-left\">{pressure}</td>\r\n  <td className=\" table-horizontal table-column-left\">{ earthPress}</td>\r\n</tr>\r\n<tr>\r\n  <td className=\"table-horizontal\">Wind</td>\r\n  {marsWinds}\r\n  <td className=\" table-horizontal table-column-left\">{eWind} </td>\r\n</tr>\r\n<tr >\r\n  <td className=\"table-horizontal\">Overall Condition</td>\r\n  {marsIcon}\r\n  <td className=\" table-horizontal table-column-left\">{earthMain}<span><img src={iconUrl} alt=\"icon for weather\"></img></span> </td>\r\n</tr>\r\n</table>\r\n</div>\r\n\r\n        <p>Date that Mar's weather data was last received: {fixedDate}</p>\r\n        <p>* Future adjustments will use html Geolocation to present your local weather conditions in the NYC slot.</p>\r\n<br>\r\n</br>\r\n\r\n<br>\r\n</br>\r\n<br></br>\r\n      </>\r\n    );\r\n  }; \r\n}\r\n  export default MarsWeather;\r\n","\r\nimport React, { Component } from \"react\";\r\nimport MarsWeather from \"../Mars/marsweather\";\r\n\r\n\r\n \r\n//take the value from this then prop this ito marsweather to dispkay in table\r\n/*\r\n*/\r\n// address formula --- need to use current weather\r\n//\"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \"&units=imperial&appid=184b90f195e0b6670ef9fee34b9291e1\"\r\n\r\n    class EarthWeather extends Component {\r\n  \r\n\r\n         constructor(props) {\r\n            super(props);\r\n            console.log(props)\r\n            this.state = { \r\n    \r\n    minEarth:[],\r\n    maxEarth: [],\r\n    condition: [],\r\n    earthWind: [],\r\n    icon:[],\r\n    earthPressure:[]\r\n            //  marsweather: [],\r\n            };\r\n          \r\n        }\r\n        \r\n    \r\n        // need to get the query to show up in the URL fetch\r\n        componentDidMount() {\r\n          const lat= this.props.lat;\r\n          const long= this.props.long\r\n                     \r\n               console.log(lat,long)\r\n       /*   \r\n          navigator.geolocation.getCurrentPosition((position) => {\r\n           const lat = position.coords.latitude;\r\n           const long= position.coords.longitude;*/\r\n          /// api.openweathermap.org/data/2.5/weather?lat={position.coords.latitude}&lon={position.coords.longitude}&appid={API key}\r\n    const ow_api= process.env.REACT_APP_OPEN_WEATHER;\r\nconst owUrl= `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${ow_api}&units=metric`;\r\nconsole.log(owUrl)\r\n            fetch(owUrl)\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    this.setState({\r\n                  \r\n                 minEarth:response.main.temp_min,\r\n                 maxEarth: response.main.temp_max,\r\n                 earthPressure: response.main.pressure,\r\n                 condition: response.weather[0].main,\r\n                 icon: response.weather[0].icon,\r\n                 earthWind:response.wind.speed\r\n                     \r\n                      \r\n                          \r\n                })\r\n              })\r\n              this.forceUpdate()\r\n            }\r\n\r\n        render() {\r\n        const {minEarth, maxEarth, condition, earthWind, earthPressure} = this.state;\r\n         console.log(minEarth, maxEarth, condition,earthWind, earthPressure)\r\n\r\n                    \r\n\r\n    \r\n    return (\r\n      \r\n        <MarsWeather {...this.state}></MarsWeather>\r\n  \r\n      \r\n    );\r\n  }; \r\n}\r\n\r\n  export default EarthWeather;\r\n","import React, { Component } from \"react\";\r\nimport EarthWeather from \"../Earth/earthweather\";\r\n  \r\n   \r\n  \r\n  \r\n   \r\n  //take the value from this then prop this ito marsweather to dispkay in table\r\n  /*\r\n  Temporarily use the below gelocation... NYC is coming up as location since the state doesn't reset\r\n  */\r\n  \r\n  \r\n  \r\n  \r\n      class CitySearch extends Component {\r\n    \r\n  \r\n           constructor(props) {\r\n              super(props);\r\n              this.state = { \r\n                lat: [0],\r\n          long: [0]\r\n              };\r\n          }\r\n          \r\n          // need to get the child component to update when the parent state changes\r\n          \r\n        componentDidMount(){\r\n          this.handleEvent()\r\n        }\r\n      \r\n          // need to get the query to show up in the URL fetch\r\n  //set state comes back as undefined, work on this        \r\n  \r\n  handleEvent = event => {\r\n\r\n      // Get location of user\r\n      const success = position => {\r\n        const latitude = position.coords.latitude;\r\n        const longitude = position.coords.longitude;\r\n       // console.log(latitude, longitude);\r\n        this.setState({\r\n          lat: latitude,\r\n          long: longitude\r\n        });\r\n      };\r\n    \r\n      const error = () => {\r\n        this.setState({\r\n          lat: 40.71,\r\n          long: -74.00\r\n        });\r\n       alert(\"Unable to retrieve your location, so here's NY City's Comparison\")\r\n      \r\n      };\r\n    \r\n      navigator.geolocation.getCurrentPosition(success, error);\r\n\r\n  };\r\n        \r\n              \r\n              /*if (\"geolocation\" in navigator) {\r\n\r\n\r\n\r\n\r\n                navigator.geolocation.getCurrentPosition(function(position) {\r\n                  this.setState({\r\n                 lat:position.coords.latitude,\r\n                 long: position.coords.longitude,\r\n                  })\r\n                });\r\n              } else {\r\n               alert(\"You browser does support Geolocation- See the comparison with NYC\")\r\n              }\r\n            }\r\n*/\r\n      \r\n                    \r\n\r\n              \r\n        \r\n  \r\n          render() {\r\n         \r\n            const {lat,long} = this.state;\r\n            console.log(lat,long)\r\n      \r\n      return (\r\n        <>\r\n      {/*} In Future will fix re-rendering that allows working geolocation for local weather\r\n        <button onClick={this.props.handleEvent}>Click on me</button>*/}\r\n          <EarthWeather lat={this.state.lat} long={this.state.long}></EarthWeather>\r\n    </>\r\n        \r\n      );\r\n    }; \r\n  }\r\n  \r\n    export default CitySearch;\r\n  \r\n\r\n// Below code was for selecting their city, keeping it in case I go with that \r\n// for browsers that do not let you use html geolocation\r\n/*\r\n\r\nfunction CitySearch() {\r\n  const [city, setCity] = useState(\" \");\r\n\r\n  const handleInput = event => {\r\n    setCity(event.target.value);\r\n  };\r\n\r\n  const logValue = () => {\r\n    console.log(city);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    \r\n    <div>\r\n      <input onChange={handleInput} placeholder=\"Enter name\"/>\r\n      <button onClick={logValue}>Log value</button>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default CitySearch;\r\n*/","import React, {Component} from 'react';\r\n//import moment from 'moment';\r\nimport '../App.css';\r\nimport CitySearch from '../Components/Earth/citySearch';\r\n//import EarthWeather from '../Components/Earth/earthweather';\r\n//import MarsWeather from '../Components/Mars/marsweather';\r\n\r\n    const api_key= process.env.REACT_APP_GOVT_API_KEY;\r\n    \r\n   /* Hold over from old approach to current photos\r\n   const today= moment().format(\"YYYY-MM-DD\");\r\n    console.log(today)*/\r\n\r\n\r\nconst APIurl = `https://api.nasa.gov/mars-photos/api/v1/rovers/Perseverance/latest_photos?api_key=${api_key}`;\r\n\r\nclass Mars extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n          marspic: [],\r\n       \r\n        \r\n         \r\n\r\n        };\r\n    }\r\n  \r\n\r\n    componentDidMount() {\r\n        fetch(APIurl)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                this.setState({\r\n                  marspic:response.latest_photos[0].img_src\r\n                 \r\n                  \r\n                })\r\n            })\r\n    }\r\n  \r\n    render() {\r\n\r\n   const {marspic} = this.state;\r\n      console.log(marspic)\r\n        return (\r\n          <>\r\n          <div>\r\n          <h1 className='title'>Mars</h1>\r\n          <a href={this.state.image}>\r\n          <img  alt='mars from perseverance' src={this.state.marspic}  className=\"planet-photo\"/>\r\n          </a>\r\n          <p>Perseverance's latest photo from Mars</p>\r\n    \r\n            </div>\r\n            <br>\r\n            </br>\r\n            <br></br>\r\n            <CitySearch></CitySearch>\r\n\r\n</>\r\n       )\r\n   }\r\n        }\r\nexport default Mars;\r\n/*\r\nThe fetch itself works, and extracted JSON, fiddling with the format to better map the information and \r\nuse it below. Not to mention, this would better allow me to use \r\n\r\nconst baseUrl= 'https://api.nasa.gov/planetary/apod';\r\n  const api_key= process.env.REACT_APP_GOVT_API_KEY;\r\n\r\n\r\n  fetch(`${baseUrl}?api_key=${api_key}`)\r\n    .then(response => response.json())\r\n    .then(response => {\r\n  console.log (response.hdurl, response.explanation);\r\n\r\n     I believe the above link was the right one, need to find how to return the \r\n      link-- ran into request issues, too many while testing state\r\n       console.log(response.originator.name)\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n\r\n    \r\n    return (\r\n      <>\r\n      <h1>Home</h1>\r\n      <p> NASA is the bees knees.\r\n        </p>\r\n        <div className=\"pic-day\">\r\n          <p>Picture Goes Here</p>\r\n      \r\n        </div>\r\n\r\n\r\n      </>\r\n    );\r\n    }\r\n  export default Home;\r\n*/\r\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Navbar from './Components/Navbar.js'\nimport Footer from './Components/Footer'\nimport Home from './Pages/home'\nimport Music from './Components/MusicPanel'\nimport Earth from './Pages/Earth';\nimport Mars from './Pages/Mars';\n\nrequire('dotenv').config()\n\nfunction App() {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n        <>\n          <Navbar />\n          <div className='page-container'>\n          <div className='LeftPanel'>\n          <Music/>\n          </div>\n          <div className='main body-text'>\n          <Switch>\n         <Route exact path= {'/'} component={Home}/>\n         <Route exact path= {'/earth'} component={Earth}/>\n         <Route exact path= {'/mars'} component={Mars}/>\n         \n          {/*  <Route exact path='/' component={SearchBooks} />\n            <Route exact path='/saved' component={SavedBooks} />\n  <Route component={SearchBooks} />*/}\n          </Switch>\n          </div>\n          </div>\n          <div className='footer-size'>\n          <Footer/>\n          </div>\n  \n        </>\n      </HashRouter>\n\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router} from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}