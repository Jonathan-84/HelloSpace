{"version":3,"sources":["Components/Navbar.js","Components/Footer.js","Assets/Images/video.png","Pages/home.js","Components/MusicPanel.js","Pages/Earth.js","Components/Mars/marsweather.js","Components/Earth/earthweather.js","Components/Earth/citySearch.js","Pages/Mars.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","to","Footer","href","target","rel","APIurl","process","Home","props","state","image","title","explanation","type","fetch","then","response","json","setState","url","media","media_type","showMedia","this","alt","src","video","console","log","Component","Music","value","handleChange","bind","event","onChange","width","height","frameBorder","allowtransparency","allow","ePhotoAPI","Earth","earthPic","earthDate","imageCaption","imageLat","imageLong","date","caption","centroid_coordinates","lat","lon","month","moment","format","day","year","long","MarsWeather","min","max","overall","wind","pressure","terrestrial_date","min_temp","max_temp","atmo_opacity","wind_speed","marsWinds","marsIcon","earthLow","minEarth","efarMin","toFixed","earthHi","maxEarth","efarMax","earthPress","earthPressure","eWind","earthWind","earthMain","condition","eIcon","icon","iconUrl","stDate","fixedDate","cTempMin","farMin","cTempMax","farMax","cleanLat","Number","cleanLong","EarthWeather","owUrl","main","temp_min","temp_max","weather","speed","forceUpdate","CitySearch","handleEvent","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","alert","Mars","marspic","latest_photos","img_src","require","config","App","basename","exact","path","component","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f79e1734.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction Navbar(){\r\n\r\n    return (\r\n      <>\r\n                <div className='nav-container'>\r\n                  <div className=\"header-image\">\r\n                    <div className='header-container'>\r\n                  <h2>\r\n                      <Link to={\"/Home\"} className=\"nav-text\"> Hello Space</Link>\r\n                      </h2>\r\n                <div className='nav-links'>\r\n       {/*      <ul >\r\n                <Link to=\"/\" className=\"nav-text\">Temp</Link>\r\n                        </ul>*/}\r\n                \r\n       <ul>\r\n                <Link to={\"/earth\"} className=\"nav-text\">Earth</Link>\r\n                </ul>\r\n                <ul>\r\n                <Link to={\"/mars\"} className=\"nav-text\">Mars</Link>\r\n                </ul>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n      </>\r\n    );\r\n  };\r\n  \r\n  export default Navbar;\r\n  ","import React from 'react';\r\n\r\n// Will add in the future\r\nfunction Footer() {\r\n    return (\r\n      <>\r\n\r\n<div className='footer'>\r\n    <div className=\"footer-container\" >  \r\n\r\n<ul>\r\n    <a className='footer-text' href=\"https://github.com/Jonathan-84\" target=\"_blank\" rel='noreferrer'>GitHub</a>\r\n </ul>\r\n <ul>\r\n    <a className='footer-text' href=\"https://www.linkedin.com/in/jrob84\" target=\"_blank\" rel='noreferrer'>LinkedIn</a>\r\n    </ul>\r\n</div>\r\n</div>\r\n</>    \r\n    )\r\n    \r\n}\r\nexport default Footer;","export default __webpack_public_path__ + \"static/media/video.c150e9f1.png\";","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport video from '../Assets/Images/video.png';\r\n\r\n    const api_key= process.env.REACT_APP_GOVT_API_KEY;\r\n    \r\n// this page can only be accessed by clicking the website title, \r\n// maybe add button in future.\r\n\r\n//This page uses the NASA Picture of the Day API- it really is awesome, I've\r\n//gotten to see the amazing pictures/videos while building this\r\n\r\n//full API request link: https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY\r\n\r\nconst APIurl = `https://api.nasa.gov/planetary/apod?api_key=${api_key}`;\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n          image: [],\r\n          title: [],\r\n          explanation: [],\r\n          type: []\r\n         \r\n\r\n        };\r\n    }\r\n  \r\n\r\n    componentDidMount() {\r\n        fetch(APIurl)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                this.setState({\r\n                    image:response.url,\r\n                    title:response.title,\r\n                    explanation:response.explanation,\r\n                    media: response.media_type\r\n\r\n                  \r\n                })\r\n            })\r\n            \r\n    }\r\n  \r\n    render() {\r\n // After Discovering that \"Picture of the Day\" could be a video, I needed to fix the ugly\r\n // site that was a picture error on the webpage\r\n      let showMedia;\r\n      if (this.state.media===\"video\") {\r\n        showMedia = (\r\n          <span>\r\n            <p>It's a video of the day! Click the icon to be redirected to it!</p>\r\n            <a href={this.state.image}>\r\n          <img  alt='random astronomy' src={video} className=\"earth-photo\" />\r\n          </a>\r\n          \r\n          </span>\r\n        )\r\n      } else {\r\n        showMedia = (\r\n          <span >\r\n          <a href={this.state.image} >\r\n          <img  alt='random astronomy' src={this.state.image} className=\"earth-photo\"/>\r\n          </a>\r\n          </span>\r\n        )\r\n      }\r\n      const { image, title, explanation} = this.state;\r\n      console.log(image, title, explanation)\r\n        return (\r\n          <>\r\n         \r\n          <h1 className='title'>Welcome</h1>\r\n          <p className='explText'>Like many, I love NASA. It's more than a government agency, it's... possiblity, potential, wonder, humanity at its best\r\n            and much more. This mini-project as been an opportunity to geek out and experiment for the first time (undoubtably\r\n            not the last time) with the NASA APIs.\r\n          </p>\r\n          <h3 className=\"title\">Astronomy Photo of the Day</h3>\r\n          {showMedia}\r\n      \r\n            <p className='title'>{this.state.title}</p>\r\n            <p className='explText'>{this.state.explanation}</p>\r\n          \r\n            <br>\r\n            </br>\r\n            <br></br>\r\n            <br></br>\r\n</>\r\n       )\r\n   }\r\n        }\r\nexport default Home;\r\n\r\n","import React, {Component} from 'react';\r\n\r\n\r\n/* My original plan was to have the Spotify player stay and not refresh on the \r\nleft panel at all times, that required a full stack app, which I wanted to avoid\r\nthis time. So instead, I followed the general idea of keeping a permenant left panel\r\nbut used their iFrame and the ability to select options- changing their \r\naddressess to update the iFrame\r\n*/\r\n\r\nclass Music extends Component {\r\n \r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: 'https://open.spotify.com/embed/playlist/792i0xmXcx6A9R3dYr3koO?theme=0'\r\n  };\r\n\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n\r\n  }\r\n\r\n \r\n  \r\n  handleChange(event) {\r\n    this.setState({value: event.target.value\r\n    });\r\n  \r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n      <br></br>\r\n      <form className=' align-content-center'>\r\n        <label className= 'music-color'>  Space Radio </label>\r\n          <select value={this.state.value} onChange={this.handleChange} className=\"music-color\">\r\n          <option className=\"music-color\" value=\"https://open.spotify.com/embed/playlist/792i0xmXcx6A9R3dYr3koO?theme=0\">Give Me Some Space</option>\r\n            <option className=\"music-color\" value=\"https://open.spotify.com/embed/episode/2RHNMVBEJ91SMisVu6NoPD\">Star Talk</option>\r\n            <option className=\"music-color\" value=\"https://open.spotify.com/embed/playlist/6pcuzwZSIw7OgL149bgJmZ\">Voyager Golden Record</option>\r\n          </select>\r\n     \r\n      </form>\r\n      <br></br>\r\n      <div className=\" center-music\">\r\n <iframe src={this.state.value}\r\n     width=\"100%\" height=\"400\" \r\n     frameBorder=\"0\" title='Spotify'allowtransparency=\"true\" allow=\"encrypted-media\">Listen In Space</iframe>\r\n        </div>\r\n  <br>\r\n  </br>\r\n  <br></br>\r\n  <br></br>\r\n  \r\n\r\n            \r\n      </>\r\n    );\r\n}\r\n}\r\n\r\nexport default Music;\r\n    \r\n\r\n\r\n/*import React from 'react';\r\n\r\n\r\n\r\nconst Music = () => {\r\n\r\n\r\n\r\n    return (\r\n      <>\r\n     \r\n     <iframe src=\"https://open.spotify.com/embed/playlist/792i0xmXcx6A9R3dYr3koO?theme=0\" \r\n     width=\"100%\" height=\"500\" \r\n     frameBorder=\"0\" title='Spotify'allowtransparency=\"true\" allow=\"encrypted-media\">Listen In Space</iframe>\r\n\r\n      </>\r\n    );\r\n  }; \r\n  export default Music;\r\n\r\n*/","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\n//import NearEarth from '../Components/Earth/nearEarth';\r\n\r\nconst api_key= process.env.REACT_APP_GOVT_API_KEY;\r\nconst ePhotoAPI = `https://api.nasa.gov/EPIC/api/natural/images?api_key=${api_key}`\r\n\r\n/// https://epic.gsfc.nasa.gov/archive/natural/2015/10/31/png/epic_1b_20151031074844.png\r\n\r\nclass Earth extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = { \r\n        earthPic: [],\r\n        earthDate: [],\r\n        imageCaption: [],\r\n        imageLat: [],\r\n        imageLong: []\r\n\r\n      //  marsweather: [],\r\n     \r\n      \r\n       \r\n\r\n      };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n\r\n\r\n      fetch(ePhotoAPI)\r\n          .then(response => response.json())\r\n          .then(response => {\r\n              this.setState({\r\n                earthPic:response[0].image,\r\n                earthDate:response[0].date,\r\n                imageCaption:response[0].caption,\r\n                imageLat:response[0].centroid_coordinates.lat,\r\n                imageLong:response[0].centroid_coordinates.lon\r\n              //  marspic:response.latest_photos[0].img_src\r\n               \r\n          \r\n              })\r\n          })\r\n          \r\n  }\r\n\r\n  render() {\r\n\r\n    const {earthPic, earthDate, imageCaption, imageLat, imageLong} = this.state;\r\n    console.log(earthDate, earthPic, imageCaption, imageLat, imageLong)\r\n\r\n    const date= earthDate\r\n    const month= moment(date).format('MM')\r\n    const day= moment(date).format('DD')\r\n    const year=moment(date).format('YYYY')\r\n    console.log(month,day,year)\r\n\r\nconst lat = imageLat;\r\nconst long = imageLong;\r\n\r\nconst image= `https://epic.gsfc.nasa.gov/archive/natural/${year}/${month}/${day}/png/${this.state.earthPic}.png`\r\n\r\n\r\n    return (\r\n      <>\r\n      <h1 className=\"title \">Earth</h1>\r\n      <br></br>\r\n        <a href={image}>\r\n          <img  alt=\"Earth from DSCOVR's Earth Polychromatic Imaging Camera (EPIC) instrument.\" src={image} className=\"earth-photo\"/>\r\n          </a>\r\n          <p className='explText'>{this.state.imageCaption} on {month}/{day}/{year}.</p>\r\n<p className='explText'>Geographical coordinates that the satellite is looking at:  <br></br>Longitude: {lat} || Latitude: {long}</p>\r\n          <br></br>\r\n          <br></br>\r\n          <br></br>\r\n    {/*      <NearEarth></NearEarth>*/}\r\n\r\n      </>\r\n    );\r\n  }; \r\n}\r\n  export default Earth;\r\n\r\n","import React, {Component} from 'react';\r\n//import Moment from 'react-moment';\r\nimport moment from 'moment';\r\n\r\n/* I could not use the Mars Insight API, unfortunately technical difficulties appeared\r\nto greatly limite readings (last data was December 2020), so I needed to use the old \r\nCuriousity Rover API.\r\n\r\nFeeling that comparing the weather we know vs Mars makes it real, I've\r\nused conversions below so that everyone can see the Temperature compared\r\nto their local metric.\r\n*/\r\n\r\n\r\nconst APIurl = 'https://api.maas2.apollorion.com/';\r\n\r\n    class MarsWeather extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = { \r\n              date:[],\r\n              min:[],\r\n              max:[], \r\n              overall:[], \r\n              wind:[], \r\n              pressure:[]\r\n            //  marsweather: [],\r\n           \r\n            \r\n             \r\n    \r\n            };\r\n        }\r\n      \r\n    \r\n        componentDidMount() {\r\n    \r\n\r\n            fetch(APIurl)\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    this.setState({\r\n                      date:response.terrestrial_date,\r\n                      min:response.min_temp,\r\n                      max:response.max_temp,\r\n                      overall: response.atmo_opacity,\r\n                      wind: response.wind_speed,\r\n                      pressure: response.pressure\r\n                    //  marspic:response.latest_photos[0].img_src\r\n                     \r\n                \r\n                    })\r\n                })\r\n                \r\n        }\r\n      \r\n        render() {\r\n          // Brings in the earth minimum temp child\r\n          const earthLow= this.props.minEarth;\r\n          \r\n          // Converts to Fahrenheit\r\n          const eLowFar= earthLow * 9 /5 +32;\r\n          const efarMin=eLowFar.toFixed(2)\r\n\r\n           // Brings in the earth minimum temp child\r\n           const earthHi= this.props.maxEarth;\r\n\r\n           const eHiFar= earthHi * 9 /5 +32;\r\n           const efarMax=eHiFar.toFixed(2)\r\n\r\n            // Brings in the earth press temp child\r\n          const earthPress= this.props.earthPressure;\r\n\r\n           // Brings in the earth wind to child\r\n           const eWind= this.props.earthWind;\r\n\r\n            // Brings in the earth press temp child\r\n          const earthMain= this.props.condition;\r\n\r\n          // Brings in the earth icon and set it for rendering\r\n          const eIcon= this.props.icon;\r\n          const iconUrl= `http://openweathermap.org/img/wn/${eIcon}@2x.png`\r\n          \r\n          \r\n          \r\n\r\n      const {date,max, min, overall, wind, pressure} = this.state;\r\n\r\n      \r\n      // The wind speeds which the rover hasn't been getting, really stands out, this adds text\r\n      // This was more for aesthetics\r\n      let marsWinds;\r\n      if \r\n      (wind === null) {\r\n        marsWinds = (\r\n        <p  className='table-horizontal table-column-left table-header-text'>No data</p>\r\n        )\r\n      }\r\n      else{\r\n        marsWinds=(\r\n          <td className=\" table-horizontal table-column-left\">{wind} </td>\r\n       )\r\n      }\r\n/// this If/else allows me to adjust overall Icon using OpenWeather API Icons. \r\n// (On Mars I've only seen sunny so far)- Again this is more for aesthetics\r\n      let marsIcon;\r\n      if\r\n      (overall === \"Sunny\") {\r\n        marsIcon=(\r\n        <td className=\" table-horizontal table-column-left\">{overall}<span><img src=\"http://openweathermap.org/img/wn/01d@2x.png\" alt=\"icon for weather\"></img></span> </td>\r\n        )\r\n      }\r\n      else {\r\nmarsIcon=(\r\n  <td className=\"table-horizontal table-column-left\">{overall} </td>\r\n)\r\n      }\r\n\r\n      // Used this process to convert the date to a more readable format \r\n      // Sorry Europe, rest of the world, used the common format in the US. \r\n      const stDate = date;\r\n      const fixedDate= moment(stDate).format('MMMM Do YYYY')\r\n      //new Date(stDate)\r\n      console.log (fixedDate)\r\n    \r\n      \r\n////////////////////////////////////\r\n\r\n//MARS\r\n      // converted Celsius to Fahre for Min\r\n      const cTempMin= min;\r\n      const toFarMin= cTempMin * 9 /5 +32;\r\n     const farMin=toFarMin.toFixed(2)\r\n// converted Celsius to Fahr for Max (data comes in as Celsius)\r\n      const  cTempMax= max;\r\n      const toFarMax= cTempMax * 9/5 +32;\r\n    \r\n   const farMax=toFarMax.toFixed(2)\r\n////////////////////////////////////////\r\n// Used the below formula to convert the Longitude and Lattitude captured from\r\n// the working City Search components geolocation, to a more presentable format,\r\n// so the user could see the location feeding the weather API \r\n// This is currently commented out in the chart, since the Geolocation isn't fully\r\n// functional and I'd like to avoid confusion\r\nconst lat=this.props.lat;\r\nconst latNum=Number(lat);\r\nconst cleanLat= latNum.toFixed(2)\r\n\r\nconst long=this.props.long;\r\nconst longNum=Number(long)\r\nconst cleanLong=longNum.toFixed(2)\r\n\r\nconsole.log(cleanLat, cleanLong)\r\n\r\n    return (\r\n      <>\r\n      <h1 className=\"title\">Mars Weather</h1>\r\n      <p className='explText'> Mars Data is from the Curiosity Rover (Rover Environmental Monitoring Station)</p>\r\n      <div className='w3-responsive'>\r\n      <table className=\"w3-table-all table-header-text\">\r\n<tr >\r\n  <th className=\" w3-center table-header-text\">Category</th>\r\n  <th className=\" w3-center table-column-left table-header-text\">Mars</th>\r\n  <th className=\" w3-center table-column-left table-header-text\">Earth (NYC{/*Lat: {cleanLat} Long: {cleanLong} */}*)</th>\r\n</tr>\r\n<tr>\r\n  <td className=\"table-horizontal\">Temp Low</td>\r\n  <td className=\" table-horizontal table-column-left\">{cTempMin} C / {farMin} F</td>\r\n  <td className=\" table-horizontal table-column-left\">  {earthLow} C/ {efarMin} F</td>\r\n</tr>\r\n<tr>\r\n  <td className=\"table-horizontal\">Temp High</td>\r\n  <td className=\" table-horizontal table-column-left\">{cTempMax} C / {farMax} F</td>\r\n  <td className=\" table-horizontal table-column-left\">{earthHi} C/ {efarMax} F</td>\r\n</tr>\r\n<tr>\r\n  <td className=\"table-horizontal\">Atmospheric Pressure</td>\r\n  <td className=\"table-horizontal  table-column-left\">{pressure}</td>\r\n  <td className=\" table-horizontal table-column-left\">{ earthPress}</td>\r\n</tr>\r\n<tr>\r\n  <td className=\"table-horizontal\">Wind</td>\r\n  {marsWinds}\r\n  <td className=\" table-horizontal table-column-left\">{eWind} </td>\r\n</tr>\r\n<tr >\r\n  <td className=\"table-horizontal\">Overall Condition</td>\r\n  {marsIcon}\r\n  <td className=\" table-horizontal table-column-left\">{earthMain}<span><img src={iconUrl} alt=\"icon for weather\"></img></span> </td>\r\n</tr>\r\n</table>\r\n</div>\r\n\r\n        <p>Date that Mar's weather data was last received: {fixedDate}</p>\r\n        <p className='explText'> For now the location is New York City from the Open Weather API, but this will be corrected to capture use your coordinates{/** If you browser doesn't support, or you don't accept HTML5 geolocation which captures your\r\n          Longitude and Latitude, New York City will be the place holder \r\n    location.*/}\r\n        </p>\r\n<br>\r\n</br>\r\n\r\n<br>\r\n</br>\r\n<br></br>\r\n<br></br>\r\n      </>\r\n    );\r\n  }; \r\n}\r\n  export default MarsWeather;\r\n","\r\nimport React, { Component } from \"react\";\r\nimport MarsWeather from \"../Mars/marsweather\";\r\n\r\n\r\n \r\n/* The weather values collected here are then passed to the Marsweather component.\r\nThese values populate the Mars vs Earth Comparison chart. I need to rework code,\r\nso that the state change from the citySearch component will trigger the weather\r\nAPI to refetch.\r\n\r\n*/\r\n// address formula --- need to use current weather\r\n//\"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \"&units=imperial&appid=184b90f195e0b6670ef9fee34b9291e1\"\r\n\r\n    class EarthWeather extends Component {\r\n  \r\n\r\n         constructor(props) {\r\n            super(props);\r\n            console.log(props)\r\n            this.state = { \r\n    \r\n    minEarth:[],\r\n    maxEarth: [],\r\n    condition: [],\r\n    earthWind: [],\r\n    icon:[],\r\n    earthPressure:[]\r\n            };\r\n          \r\n        }\r\n        \r\n        componentDidMount() {\r\n          const lat= this.props.lat;\r\n          const long= this.props.long\r\n                     \r\n               console.log(lat,long)\r\n      \r\n          /// api.openweathermap.org/data/2.5/weather?lat={position.coords.latitude}&lon={position.coords.longitude}&appid={API key}\r\n    const ow_api= process.env.REACT_APP_OPEN_WEATHER;\r\nconst owUrl= `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${ow_api}&units=metric`;\r\nconsole.log(owUrl)\r\n            fetch(owUrl)\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    this.setState({\r\n                  \r\n                 minEarth:response.main.temp_min,\r\n                 maxEarth: response.main.temp_max,\r\n                 earthPressure: response.main.pressure,\r\n                 condition: response.weather[0].main,\r\n                 icon: response.weather[0].icon,\r\n                 earthWind:response.wind.speed\r\n                     \r\n                      \r\n                          \r\n                })\r\n              })\r\n              this.forceUpdate()\r\n            }\r\n\r\n        render() {\r\n        const {minEarth, maxEarth, condition, earthWind, earthPressure} = this.state;\r\n         console.log(minEarth, maxEarth, condition,earthWind, earthPressure)\r\n\r\n                    \r\n\r\n    \r\n    return (\r\n      \r\n        <MarsWeather {...this.state} lat={this.props.lat} long={this.props.long}></MarsWeather>\r\n  \r\n      \r\n    );\r\n  }; \r\n}\r\n\r\n  export default EarthWeather;\r\n","import React, { Component } from \"react\";\r\nimport EarthWeather from \"../Earth/earthweather\";\r\n  \r\n   \r\n  \r\n  //Need to rewrite code- currently the state will change, get passed correctly to\r\n  //child component, but I need to re-run the API fetch at that time to use fallback location\r\n  //or user geolocation\r\n   \r\n// Fall back location is around NYC, USA. \r\n\r\n//the Latitude and Longitude states get passed to Earthweather for use with Open Weather API\r\n  \r\n  \r\n  \r\n  \r\n      class CitySearch extends Component {\r\n    \r\n  \r\n           constructor(props) {\r\n              super(props);\r\n              this.state = { \r\n                lat: [40.71],\r\n          long: [-74.00]\r\n              };\r\n          }\r\n          \r\n         \r\n        componentDidMount(){\r\n          this.handleEvent()\r\n        }\r\n      \r\n  handleEvent = event => {\r\n\r\n      // Get location of user\r\n      const success = position => {\r\n        const latitude = position.coords.latitude;\r\n        const longitude = position.coords.longitude;\r\n       // console.log(latitude, longitude);\r\n        this.setState({\r\n          lat: latitude,\r\n          long: longitude\r\n        });\r\n      };\r\n    \r\n      const error = () => {\r\n        this.setState({\r\n          lat: 40.71,\r\n          long: -74.00\r\n        });\r\n       alert(\"Unable to retrieve your location, so here's NY City's Comparison\")\r\n      \r\n      };\r\n    \r\n      navigator.geolocation.getCurrentPosition(success, error);\r\n\r\n  };\r\n        \r\n          render() {\r\n         \r\n            const {lat,long} = this.state;\r\n            console.log(lat,long)\r\n      \r\n      return (\r\n        <>\r\n      {/*} In Future will fix re-rendering that allows working geolocation for local weather\r\n        <button onClick={this.props.handleEvent}>Click on me</button>*/}\r\n          <EarthWeather lat={this.state.lat} long={this.state.long}></EarthWeather>\r\n    </>\r\n        \r\n      );\r\n    }; \r\n  }\r\n  \r\n    export default CitySearch;\r\n  \r\n\r\n// Below code was for selecting their city, keeping it in case I go with that \r\n// for browsers that do not let you use html geolocation in the future\r\n/*\r\n\r\nfunction CitySearch() {\r\n  const [city, setCity] = useState(\" \");\r\n\r\n  const handleInput = event => {\r\n    setCity(event.target.value);\r\n  };\r\n\r\n  const logValue = () => {\r\n    console.log(city);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    \r\n    <div>\r\n      <input onChange={handleInput} placeholder=\"Enter name\"/>\r\n      <button onClick={logValue}>Log value</button>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default CitySearch;\r\n*/","import React, {Component} from 'react';\r\n//import moment from 'moment';\r\nimport '../App.css';\r\nimport CitySearch from '../Components/Earth/citySearch';\r\n\r\n    const api_key= process.env.REACT_APP_GOVT_API_KEY;\r\n    \r\n   // This is the main Mars page and specifically- the parent of the children Components.\r\n   // This page uses the NASA Mars Rover Photos API (specifically I've chosen Perserverance)\r\n   // took some digging, API documentation not updated, so easy to miss the latest rover\r\n\r\n   //This doesn't pass props to City Search, it just starts the Mars rendering process\r\n   // as props are passed through the other components.\r\nconst APIurl = `https://api.nasa.gov/mars-photos/api/v1/rovers/Perseverance/latest_photos?api_key=${api_key}`;\r\n\r\nclass Mars extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n          marspic: [],\r\n       \r\n        \r\n         \r\n\r\n        };\r\n    }\r\n  \r\n\r\n    componentDidMount() {\r\n        fetch(APIurl)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                this.setState({\r\n                  marspic:response.latest_photos[0].img_src\r\n                 \r\n                  \r\n                })\r\n            })\r\n    }\r\n  \r\n    render() {\r\n\r\n   const {marspic} = this.state;\r\n      console.log(marspic)\r\n        return (\r\n          <>\r\n          <div>\r\n          <h1 className='title'>Mars</h1>\r\n          <a href={this.state.image}>\r\n          <img  alt='mars from perseverance' src={this.state.marspic}  className=\"planet-photo\"/>\r\n          </a>\r\n          <p className='explText'>Perseverance's latest photo from Mars</p>\r\n    \r\n            </div>\r\n            <br>\r\n            </br>\r\n            <br></br>\r\n            <CitySearch></CitySearch>\r\n\r\n</>\r\n       )\r\n   }\r\n        }\r\nexport default Mars;\r\n/*\r\nThe fetch itself works, and extracted JSON, fiddling with the format to better map the information and \r\nuse it below. Not to mention, this would better allow me to use \r\n\r\nconst baseUrl= 'https://api.nasa.gov/planetary/apod';\r\n  const api_key= process.env.REACT_APP_GOVT_API_KEY;\r\n\r\n\r\n  fetch(`${baseUrl}?api_key=${api_key}`)\r\n    .then(response => response.json())\r\n    .then(response => {\r\n  console.log (response.hdurl, response.explanation);\r\n\r\n     I believe the above link was the right one, need to find how to return the \r\n      link-- ran into request issues, too many while testing state\r\n       console.log(response.originator.name)\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    });\r\n\r\n    \r\n    return (\r\n      <>\r\n      <h1>Home</h1>\r\n      <p> NASA is the bees knees.\r\n        </p>\r\n        <div className=\"pic-day\">\r\n          <p>Picture Goes Here</p>\r\n      \r\n        </div>\r\n\r\n\r\n      </>\r\n    );\r\n    }\r\n  export default Home;\r\n*/\r\n","import React from 'react';\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport './App.css';\nimport Navbar from './Components/Navbar.js'\nimport Footer from './Components/Footer'\nimport Home from './Pages/home'\nimport Music from './Components/MusicPanel'\nimport Earth from './Pages/Earth';\nimport Mars from './Pages/Mars';\n\nrequire('dotenv').config()\n\nfunction App() {\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n        <>\n          <Navbar />\n          <div className='page-container'>\n          <div className='LeftPanel'>\n          <Music/>\n          </div>\n          <div className='main body-text'>\n          <Switch>\n         <Route exact path= {'/home'} component={Home}/>\n         <Route exact path= {'/earth'} component={Earth}/>\n         <Route exact path= {'/mars'} component={Mars}/> \n         <Route render={() => <Redirect to={'/home'} />} />\n\n          </Switch>\n          </div>\n          </div>\n          <div className='footer-size'>\n          <Footer/>\n          </div>\n  \n        </>\n      </HashRouter>\n\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router} from \"react-router-dom\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}